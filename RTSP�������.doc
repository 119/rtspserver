RTSP服务器搭建流程

rtspservice.cpp文件主函数中：
1.在主函数中调用tcp_listen 函数，创建指定端口的TCP套接字，把属性设置成非阻塞，并监听。
2.调用 ScheduleInit ，初始化schedule_list 队列，创建任务处理调度线程schedule_do。
	在schedule_do线程中处理流程为打开指定.264文件，然后下列处于循环中：如果全局变量g_s32DoPlay大于零则读取数据，找出文件的nalu单元数据，其中g_s32DoPlay的值在添加客户端时就在调用RTSP_setup时自减，在调用RTSP_teardown时自增。然后调用RtpSend向正在播放的有效队列客户端发送数据。如果添加RTCP，那么就在此处添加对RTCP处理的函数。
3.在主循环中调用EventLoop等待客户端连接，如果连接，则调用AddClient向静态变量pRtspList链表中增加一个客户端。并且调用ScheduleConnections对链表中已经存在的客户端进行相应处理。这个过程在循环中一直进行。


ScheduleConnections函数是对已经存在的客户端进行处理，流程如下：
如果pRtspList链表非空，则调用RtspServer对链表中元素进行处理，如果返回参数正常，则对链表下一个元素进行处理。如果处理出错，则释放链表占有的资源，并且g_s32DoPlay--。


RtspServer函数为对每一个所连接的客户端进行命令解析处理：
用select判断TCP端口是否有数据读取，是则调用tcp_read读取数据，并且获取客户端地址信息，存入pRtsp->stClientAddr；然后把收取数据存入链表->in_buffer中；
调用RTSP_handler对链表中的数据进行处理；
如果rtsp->out_size>0，则把发送缓存区中的消息发送给客户端，这是服务器处理完成对应命令之后给客户端的响应。
如果增加RTCP控制，那么在此处还得增加接收客户端rtcp端口的数据，放在对应的缓存中，然后在schedule_do线程对其进行处理。


RTSP_handler为对接收的数据进行处理函数：
通过判断pRtspBuf->in_size是否为零，来判断接收缓存中是否有消息，如果有则：
a，调用RTSP_validate_method把处理命令解析出来；b，调用RTSP_state_machine消息处理状态机，按照对应命令来进行相关处理；处理完成之后，调用RTSP_discard_msg把缓存区中首个命令删除。如果还有命令则继续处理。

主线程在main、EventLoop和ScheduleConnections处循环，直到有客户端，再加上RtspServer处；直到有请求接收，调用RTSP_handler对其处理。
schedule_do线程就按需要读取264文件，然后发送RTP数据。


客户端发送的消息格式为：
CMD rtsp://IP:port/file.264 RTSP/1.0 \r\n
Cseq: 2\r\n
User-Agent: LibVLC/1.1.8 (LIVE555 Streaming Media v2011.01.06)\r\n
\r\n

注：CMD 为客户端命令具体有 OPTIONS DESCRIBE SETUP PLAY TEARDOWN;
	消息以两个回车换行符 \r\n 结束


RTSP_state_machine 为RTSP服务器状态机
先判断RTSP_session的->cur_state判断当前所处的状态，INIT_STATE表示初始态，在初始化之后为此状态；READY_STATE表示准备好状态，客户端发送setup命令之后，服务器变成此状态；PLAY_STATE表示播放状态，当客户端发送play命令之后，服务器变成此状态。

现在对于vlc命令按顺序来介绍：
vlc首先发送OPTIONS请求：
OPTIONS rtsp://192.168.245.96:6880/test.264 RTSP/1.0 
CSeq: 2 
User-Agent: LibVLC/1.1.8 (LIVE555 Streaming Media v2011.01.06)

此时服务器处于INIT_STATE状态，然后调用RTSP_options，继而调用send_options_reply，服务器发回响应即可，不需要其它处理：
RTSP/1.0 200 OK 
CSeq: 2 
Public: OPTIONS,DESCRIBE,SETUP,PLAY,PAUSE,TEARDOWN

注意：当服务器正常响应时，第一行都是这种格式；
	Cseq返回的值必须与接收的值相等，客户端以此来判断它所响应的请求，那么服务器需要把该值解析出来发送回去。

当vlc受到正确的OPTIONS响应，就发送DESCRIBE 请求：
DESCRIBE rtsp://192.168.245.96:6880/test.264 RTSP/1.0 
CSeq: 3 
User-Agent: LibVLC/1.1.8 (LIVE555 Streaming Media v2011.01.06) 
Accept: application/sdp

注：Accept: application/sdp表示vlc接收的视频描述信息格式为SDP

服务器调用RTSP_describe进行处理：
调用ParseUrl对接收到的URL解析出IP，port 和object即文件名；
获取CSeq 值；
调用GetSdpDescr获取SDP参数，SDP参数介绍格式如下：
"v=0\r\n"	//版本信息
"o=- %s %s IN IP4 %s\r\n" //<用户名><会话id><版本>//<网络类型><地址类型><地址>
"c=IN IP4 0.0.0.0\r\n"		//c=<网络信息><地址信息><连接地址>对ip4为0.0.0.0
"s=RTSP Session\r\n"		//会话名session id
"i=%s\r\n"		//会话信息
"t=0 0\r\n"		//<开始时间><结束时间>
"m=video %s RTP/AVP 96\r\n"	//<媒体格式><指定客户端端口><传送><格式列表,即媒体净荷类型> m=video 	5858 RTP/AVP 96
"a=rtpmap:96 %s/90000\r\n\r\n";		//a=rtpmap:<净荷类型><编码名>/<时钟速率> 		a=rtpmap:96 H264/90000

最后调用SendDescribeReply发回响应，格式为
**消息头**\r\n\r\n
**消息体（SDP信息）**\r\n\r\n

本例子响应消息为：
RTSP/1.0 200 OK 
CSeq: 3 
Server: sunshine/1.11 
Date: Fri, 22 Jul 2011 07:06:14 GMT 
Content-Type: application/sdp 
Content-Base: rtsp://192.168.245.96/test.264/ 
Content-Length: 143 

v=0 
o=- 3520307046 3520307046 IN IP4 192.168.245.96 
c=IN IP4 0.0.0.0 
s=RTSP Session 
t=0 0 
m=video 0 RTP/AVP 96 
a=rtpmap:96 H264/90000

注：Content-Length:表示消息体SDP的长度为必须要的参数；

vlc收到DESCRIBE响应之后就发出SETUP命令：
SETUP rtsp://192.168.245.96/test.264/ RTSP/1.0 
CSeq: 4 
User-Agent: LibVLC/1.1.8 (LIVE555 Streaming Media v2011.01.06) 
Transport: RTP/AVP;unicast;client_port=2450-2451

其中Transport: RTP/AVP;unicast;client_port=2450-2451表示客户端利用RTP发送视频流，单播，vlc客户端RTP数据流接收端口为2450，RTCP接收端口为2451。并且传输协议有 RTP/AVP (RTP)和 RTP/AVP/TCP  (TCP)两种方式，那么服务器需要对两种方式进行不同处理。

服务器对SETUP命令的处理函数是RTSP_setup
首先是解析出有用信息CSeq的值和Transport参数；
然后检查pRtsp->session_list和pRtsp->session_list->rtp_session是否为空，当连接首个客户端时就为空，然后为它们分配出对应大小的空间；不为空时，向session_list->rtp_session链表中添加一个rtp_session回话，并为链表的next分配出RTP_session大小的空间。
然而对于本例程，一个客户端对应session_list 链表的一个RTSP_session成员，而RTP_session成员只有一个，当增加客户端时增加一个RTSP_session成员，继而RTSP_session成员中增加一个RTP_session成员。

然后解析出client_port vlc播放器参数RTP和RTCP接收端口，调用RtpCreate()，创建RTP发送接口，返回值放在pRtsp->session_list->rtp_session->hndRtp中，并且把pRtsp->session_list->rtp_session->transport->pause置位，使schedule_do 线程也处于等待状态，直到客户端发送PLAY，再清零播放。
如果需要RTCP控制，则可以在此处添加收发创建RTCP控制流套接字.
调用RTP_get_port_pair();把服务器端口存放在rtp_session->transport.u.udp.ser_ports中。
调用schedule_add(rtp_session)把 rtp会话添加进入schedule队列中，并且设置播放动作sched[i].play_action=RtpSend，使schedule_do 线程能够对其调度发送RTP数据。
如果客户端发送了Session参数则解析出，如果没有则随机生成一个ID号，存放在pRtsp->session_list->session_id中。
最后调用send_setup_reply 向客户端缓存区发送响应，本例子如下：
RTSP/1.0 200 OK 
CSeq: 4 
Server: sunshine/1.11 
Date: Fri, 22 Jul 2011 07:59:50 GMT 
Session: 17618 
Transport: RTP/AVP;unicast;client_port=2450-2451;destination=192.168.245.65;source=192.168.245.96;server_port=5004-5005


在客户端受到SETUP响应之后就发送PLAY命令：
PLAY rtsp://192.168.245.96/test.264/ RTSP/1.0 
CSeq: 5 
User-Agent: LibVLC/1.1.8 (LIVE555 Streaming Media v2011.01.06) 
Session: 17618 
Range: npt=0.000-

注：npt=0.000- 表示播放时间为开始到结束

服务器受到PLAY命令之后：
首先解析出CSeq和Session对应的值；
然后调用schedule_start播放对应RTSP_session中的rtp_session。具体实现是：把对应sched[id].rtp_session->pause=0,sched[id].rtp_session->started=1,g_s32DoPlay++;
这些参数正是在schedule_do线程中需要的参数。
最后调用send_play_reply发送客户端的响应回复：
RTSP/1.0 200 OK 
CSeq: 5 
Server: sunshine/1.11 
Date: Fri, 22 Jul 2011 07:59:52 GMT 
Session: 17618

至此VLC能够正常播放接收到的264视频流。

当VLC发送TERADOWN命令关闭时：
TEARDOWN rtsp://192.168.245.96/test.264/ RTSP/1.0 
CSeq: 6 
User-Agent: LibVLC/1.1.8 (LIVE555 Streaming Media v2011.01.06) 
Session: 17618

服务器处理流程如下：
先解析出CSeq和Session对应的值；
再调用send_teardown_reply向客户端发回响应信息；
再调用RtpDelete释放rtp_session->hndRtp的资源；
调用schedule_remove删除sched 队列中rtp_session->sched_id成员；
再g_s32DoPlay--，减少正在播放的客户端数目，如果g_s32DoPlay为零，则停止发送；
服务器向客户端发返回的响应信息为：
RTSP/1.0 200 OK 
CSeq: 6 
Server: sunshine/1.11 
Date: Fri, 22 Jul 2011 09:59:47 GMT 
Session: 17618


至此所有服务器对客户端的命令解析完成。
